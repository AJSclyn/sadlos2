/************************************************************************
 * Copyright 2007-2015 - General Electric Company, All Rights Reserved
 *
 * Project: SADL
 *
 * Description: The Semantic Application Design Language (SADL) is a
 * language for building semantic models and expressing rules that
 * capture additional domain knowledge. The SADL-IDE (integrated
 * development environment) is a set of Eclipse plug-ins that
 * support the editing and testing of semantic models using the
 * SADL language.
 *
 * This software is distributed "AS-IS" without ANY WARRANTIES
 * and licensed under the Eclipse Public License - v 1.0
 * which is available at http://www.eclipse.org/org/documents/epl-v10.php
 *
 ***********************************************************************/

grammar com.ge.research.sadl.SADL hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate sADL "http://www.ge.com/research/sadl/SADL"

Model :
    'uri' baseUri=STRING ('alias' alias=NAME)? ('version' version=STRING)? 
    	Annotation* EOS 
    imports+=Import*
    elements+=ModelElement*;
    
fragment Annotation :
	','? '(' annType+=('alias'|'note') annContent+=STRING (',' annContent+=STRING)* ')'
;

Import :
    'import' importURI=STRING ('as' alias=NAME)? EOS;

// The various kinds of elements that make up the body of a model.
ModelElement :
    	Statement
    ;

// These are the things that translate directly to OWL.
Statement returns Declaration:
        DeclarationPart 
        	({ClassDeclaration.nameDeclarations+=current} 'is' 'a' 
        		('top-level'? 'class' 
        		| 'type' 'of' superElement=PrimaryTypeReference facet=DataTypeFacet?)
				(','? 'must' 'be' 'one' 'of' '{' instanceDeclarations+=DeclarationPart (',' instanceDeclarations+=DeclarationPart)* '}')?
				(describedBy+=PropertyDeclarationInClass+ | propertRestrictions+=PropertyRestriction+)?
			|{Property.nameDeclarations+=current} (','? restrictions+=PropertyRestriction)+
			|{EquivalentConcepts.nameDeclarations+=current} 'is' 'the' 'same' 'as' (complement?='not')? class2=TypeReference
			|{Instance.nameDeclarations+=current} ('is' article=AnArticle type=TypeReference)? propertyInitializers+=PropertyInitializer*
			|{DisjointClasses.types+=current} ('and' types+=DeclarationPart)+ 'are' 'disjoint'
			)  EOS
		| '{' nameDeclarations+=DeclarationPart (','  nameDeclaration+=DeclarationPart)* '}' 
			('are' ('top-level'? 'classes' | 'types' 'of' superType=TypeReference) describedBy+=PropertyDeclarationInClass* 
			|{DisjointClasses.types+=current} 'are' 'disjoint') EOS
        | {Property} AnArticle? 'relationship' 'of' from=TypeReference 'to' to=TypeReference 'is' nameDeclaration+=DeclarationPart EOS
        | AnArticle TypeReference (
        		{Instance.type=current} nameDeclarations+=DeclarationPart propertyInitializers+=PropertyInitializer*
        		|{TypeConstraint.subject=current}'is' AnArticle object=DeclarationPart 'only' 'if' propConditions+=PropertyCondition ('and' propConditions+=PropertyCondition)*) EOS
        | DataTypeDeclaration
;

PropertyCondition :
	property=[Declaration|NAME] cond+=Condition
;

PropertyInitializer:
	','? ('with'|'has') property=[Declaration|NAME] (value=ExplicitValue | '(' value=NestedInstance')')
;

NestedInstance returns Instance:
	nameDeclarations+=DeclarationPart 'is' article=AnArticle type=TypeReference propertyInitializers+=PropertyInitializer*
	| article=AnArticle type=TypeReference nameDeclarations+=DeclarationPart? propertyInitializers+=PropertyInitializer*
;

DeclarationPart returns Declaration:
	name=[Declaration|NAME] Annotation*
;

DataTypeDeclaration returns TypeDefinition:
	'data' 'type' nameDeclarations+=DeclarationPart 'is' ('a'|'an')? superType=TypeReference facet=DataTypeFacet? EOS
;

DataTypeFacet :	
		minexin=('(' | '[') min=NUMBER? ',' max=NUMBER? maxexin=(']' | ')')
	|	regex=STRING
	|	'length' (len=NUMBER | minlen=NUMBER '-' maxlen=NUMBER)
	|	'{' values+=(STRING|NUMBER) (','? values+=(STRING|NUMBER))* '}'
;

// TypeReferences
TypeReference returns TypeReference:
    UnionType
;

UnionType returns TypeReference:
	IntersectionType ({UnionType.left=current} (','|'or') right=IntersectionType)*
;

IntersectionType returns TypeReference:
	PrimaryTypeReference ({IntersectionType.left=current} ('and') right=PrimaryTypeReference)*
;

PrimaryTypeReference returns TypeReference:
	{SimpleTypeReference} type=[Declaration|NAME]
	| PrimitiveDataType
	| {Restriction}'(' property=[Declaration|NAME] condition=Condition ')'
	| '{' TypeReference '}'
;


PrimitiveDataType returns TypeReference :
	primitiveType=DataType
;

enum DataType :
    string | boolean | decimal | int | long | float | double | duration | dateTime | time | date |
    gYearMonth | gYear | gMonthDay | gDay | gMonth | hexBinary | base64Binary | anyURI | data;

// Class declarations may also describe the class's properties.
PropertyDeclarationInClass returns Property:
    	','? 'described' 'by' nameDeclarations+=DeclarationPart restrictions+=PropertyRestriction;


// These articles can appear before the property name and are indicative of the functionality of the property or
//	the cardinality of the property on the class
AnArticle :
	IndefiniteArticle | DefiniteArticle;

IndefiniteArticle :
	'A'|'a'|'An'|'an';

DefiniteArticle :
	'The'|'the';

PropertyRestriction :
    	Condition
    |   {TypeAssociation} ('describes'|'of') type=TypeReference
    |   TypeRestriction
    |   {IsInverseOf}	'is' 'the' 'inverse' 'of' otherProperty=[Declaration|NAME]
    |   {IsTransitive} 'is' 'transitive'
    |   {IsSymmetrical} 'is' 'symmetrical'
    |   {IsAnnotation} 'is' 'a' 'type' 'of' 'annotation'
//TODO    |   {SubProperty} 'is' 'a' 'type' 'of' superProperty=[Property|NAME]
    |   {IsFunctional} 'has' 'a' 'single' (inverse?='subject' | 'value')?
    |   {MustBeOneOf} 'must' 'be' 'one' 'of' '{' values+=LiteralValue (',' values+=LiteralValue)* '}'
    |   {CanOnlyBeOneOf} 'can' 'only' 'be' 'one' 'of' '{' values+=LiteralValue (',' values+=LiteralValue)* '}'
;

Condition :
	AllValuesCondition
	|   HasValueCondition
    |   CardinalityCondition
;

TypeRestriction :
    ('has'|'with') ('a' singleValued?='single' 'value'|('a' 'List'|'Lists') 'of' 'values'|'values') 'of' 'type' type=PrimaryTypeReference;

AllValuesCondition :
	'only' ('has'|'with') 'values' 'of' 'type' type=PrimaryTypeReference;

HasValueCondition :
	'always' ('has'|'with') 'value' restriction=ExplicitValue;

CardinalityCondition :
	('has'|'with') 
	('at' operator=('least'|'most') |'exactly') 
	cardinality=(NUMBER|'one') ('value'|'values') 
	('of' 'type' type=PrimaryTypeReference | 'each' 'of' 'types' type=PrimaryTypeReference)?;

ExplicitValue :
		instName=[Declaration|NAME]		// e.g., George
	|	LiteralValue		// e.g., 38.186111
	|	valueList='[' row=ValueRow ']'
	|	term='PI'					// PI
	|	term='known'				// known
    ;
    
LiteralValue :
        literalNumber=NUMBER
    |   literalString=STRING
    |   literalBoolean=('true'|'false');

ValueRow :
	explicitValues+=ExplicitValue (',' explicitValues+=ExplicitValue)*;	// e.g., George, 23, "Purple", 38.186111


// NAME should match an optional namespace followed by a local name (separated
// from the namespace by a colon character).  We also need to accept legal URI
// fragments as local names.  In particular, we need names like X.509 to work.
NAME hidden() :
   ID ->(':' ID)? ->(('-'|'.'|'~'|'%') NAME_FRAGMENT)*;

NAME_FRAGMENT hidden():
	ID | UNSIGNED_NUMBER ->ID?
;

// NUMBER matches both integral and floating point numbers.
NUMBER hidden() :
  '-'? UNSIGNED_NUMBER
;

terminal UNSIGNED_NUMBER:
     ('0'..'9')+
   | ('0'..'9')+ '.' ('0'..'9')* (('e'|'E') ('+'|'-')? ('0'..'9')+)?
   |             '.' ('0'..'9')+ (('e'|'E') ('+'|'-')? ('0'..'9')+)?
   | ('0'..'9')+                  ('e'|'E') ('+'|'-')? ('0'..'9')+
;

// EOS matches one whitespace character or EOF after the period in order to
// disambiguate the end of sentence period from periods in names.
terminal EOS :
    '.' (' '|'\t'|'\r'|'\n'|EOF);

terminal ID:
	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	
terminal STRING:
	'"' ('\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\' | '"'))* '"' |
	"'" ('\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\' | "'"))* "'";
	
terminal ML_COMMENT:
	'/*'->'*/';
	
terminal SL_COMMENT:
	'//' !('\n' | '\r')* ('\r'? '\n')?;
	
terminal WS:
	(' ' | '\t' | '\r' | '\n')+;
terminal ANY_OTHER:
	.;
	