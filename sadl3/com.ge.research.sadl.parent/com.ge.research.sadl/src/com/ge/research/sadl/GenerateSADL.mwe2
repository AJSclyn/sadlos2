module com.ge.research.sadl.GenerateSADL

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var baseName = "com.ge.research.sadl"
var rootPath = ".."

var fileExtensions = "sadl"
var grammarURI = "platform:/resource/${baseName}/src/com/ge/research/sadl/SADL.xtext"

var encoding = "UTF-8"
var lineDelimiter = "\n"

Workflow {
	
	bean = StandaloneSetup {
		scanClassPath = true
		platformUri = rootPath
		// The following two lines can be removed, if Xbase is not used.
//		registerGeneratedEPackage = "org.eclipse.xtext.xbase.XbasePackage"
//		registerGenModelFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
	}
	
	component = DirectoryCleaner {
		directory = "${rootPath}/com.ge.research.sadl/src-gen"
	}
	component = DirectoryCleaner {
		directory = "${rootPath}/com.ge.research.sadl.ide/src-gen"
	}
	component = DirectoryCleaner {
		directory = "${rootPath}/com.ge.research.sadl.ui/src-gen"
	}
	component = DirectoryCleaner {
		directory = "${rootPath}/com.ge.research.sadl.tests/src-gen"
	}
	component = DirectoryCleaner {
		directory = "${rootPath}/com.ge.research.sadl.ui.tests/src-gen"
	}
	
	component = DirectoryCleaner {
		directory = "${rootPath}/com.ge.research.sadl/model/generated"
	}
	
	component = XtextGenerator auto-inject {
		configuration = {
			project = WizardConfig auto-inject {
				genericIdeSupport = true
				testingSupport = true
			}
			code = auto-inject {
				preferXtendStubs = true
				fileHeader = 
'/************************************************************************
 * Copyright 2007-2015 - General Electric Company, All Rights Reserved
 *
 * Project: SADL
 *
 * Description: The Semantic Application Design Language (SADL) is a
 * language for building semantic models and expressing rules that
 * capture additional domain knowledge. The SADL-IDE (integrated
 * development environment) is a set of Eclipse plug-ins that
 * support the editing and testing of semantic models using the
 * SADL language.
 *
 * This software is distributed "AS-IS" without ANY WARRANTIES
 * and licensed under the Eclipse Public License - v 1.0
 * which is available at http://www.eclipse.org/org/documents/epl-v10.php
 *
 ***********************************************************************/'
			}
		}
		language = auto-inject {
			uri = grammarURI

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment2 auto-inject {}
			
	
			// generates Java API for the generated EPackages
			fragment = adapter.FragmentAdapter { 
				fragment = ecore.EMFGeneratorFragment auto-inject {
					javaModelDirectory = "/${baseName}/src-gen"
					updateBuildProperties = true
				}
			}

			fragment = adapter.FragmentAdapter {
				fragment = serializer.SerializerFragment auto-inject {
					generateStub = false
				}
			}

			// a custom ResourceFactory for use with EMF
			fragment = adapter.FragmentAdapter {
				fragment = resourceFactory.ResourceFactoryFragment auto-inject {}
			}

			// The antlr parser generator fragment.
			fragment = adapter.FragmentAdapter {
				fragment = parser.antlr.DebugAntlrGeneratorFragment auto-inject {}
			}
			fragment = adapter.FragmentAdapter {
				fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {}
			}

			// Xtend-based API for validation
			fragment = validation.ValidatorFragment2 auto-inject {
			//	composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}

			// scoping and exporting API
			fragment = scoping.ImportNamespacesScopingFragment2 auto-inject {}
			fragment = exporting.QualifiedNamesFragment2 auto-inject {}

			// generator API
			fragment = generator.GeneratorFragment2 {}

			// formatter API
//			fragment = formatting.Formatter2Fragment2 {}
			
			fragment = junit.Junit4Fragment2 auto-inject {}
			
			fragment = builder.BuilderIntegrationFragment2 auto-inject {}
			// labeling API
			fragment = adapter.FragmentAdapter {
				fragment = labeling.LabelProviderFragment auto-inject {}
			}
			
			// outline API
			fragment = ui.outline.OutlineTreeProviderFragment2 {}
			
			fragment = adapter.FragmentAdapter {
				fragment = outline.QuickOutlineFragment auto-inject {}
			}
			
			// quickfix API
			fragment = adapter.FragmentAdapter {
				fragment = quickfix.QuickfixProviderFragment auto-inject {}
			}
			
			// content assist API
			fragment = adapter.FragmentAdapter {
				fragment = contentAssist.ContentAssistFragment auto-inject {}
			}
			
			// provides a preference page for template proposals
			fragment = adapter.FragmentAdapter {
				fragment = templates.CodetemplatesGeneratorFragment auto-inject {}
			}
			
			// rename refactoring
			fragment = adapter.FragmentAdapter {
				fragment = refactoring.RefactorElementNameFragment auto-inject {}
			}
			
			// provides a compare view
			fragment = adapter.FragmentAdapter {
				fragment = compare.CompareFragment auto-inject {}
			}
			// generates a more lightweight Antlr parser and lexer tailored for content assist
			fragment = adapter.FragmentAdapter {
				fragment = parser.antlr.XtextAntlrUiGeneratorFragment auto-inject {}
			}
			// provides the necessary bindings for java types integration
			fragment = types.TypesGeneratorFragment2 auto-inject {}

			// generates the required bindings only if the grammar inherits from Xbase
			fragment = xbase.XbaseGeneratorFragment2 auto-inject {}

			// generates the required bindings only if the grammar inherits from Xtype
			fragment = xbase.XtypeGeneratorFragment2 auto-inject {}

			
		}
	}
}
