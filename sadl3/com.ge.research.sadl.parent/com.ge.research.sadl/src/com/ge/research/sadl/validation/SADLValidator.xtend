/*
 * generated by Xtext 2.9.0-SNAPSHOT
 */
package com.ge.research.sadl.validation

import com.ge.research.sadl.model.DeclarationExtensions
import com.ge.research.sadl.sADL.SADLPackage
import com.ge.research.sadl.sADL.SadlModel
import com.google.inject.Inject
import org.eclipse.xtext.validation.Check

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class SADLValidator extends AbstractSADLValidator {
	
//  public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					MyDslPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
	@Inject DeclarationExtensions declarationExtensions;

	public static String INVALID_MODEL_URI = "INVALID_MODEL_URI"
	public static String INVALID_IMPORT_URI = "INVALID_IMPORT_URI"
	public static String INVALID_MODEL_ALIAS = "INVALID_MODEL_ALIAS"
	public static String INVALID_MODEL_FILENAME = "INVALID_MODEL_FILENAME"
	
	@Check
	def checkSadlModelNameValidUri(SadlModel model) {
		var thisUri = model.baseUri
		var errMsg = SadlUtils.validateUri(thisUri);
		if (errMsg != null) {
			error(errMsg, SADLPackage.Literals.SADL_MODEL__BASE_URI, INVALID_MODEL_URI);
		}
		var thisRsrc = model.eResource
		var thisURL = thisRsrc.URI;
		var thisFN = thisURL.lastSegment
		var rsrcItr = thisRsrc.resourceSet.resources.iterator
		while (rsrcItr.hasNext()) {
			var otherRsrc = rsrcItr.next
			if (!otherRsrc.equals(thisRsrc)) {
				// this isn't the same resource
				var otherModel = otherRsrc.contents.get(0) as SadlModel
				var otherRsrcUri = otherModel.baseUri
				var otherURL = otherRsrc.URI
				var otherFN = otherURL.lastSegment
				if (thisFN.equals(otherFN)) {
					error("The filename (" + thisFN + ") is already used by model '" + otherURL + "'; filenames must be unique within a project.", SADLPackage.Literals.SADL_MODEL__BASE_URI, INVALID_MODEL_FILENAME)
				}
				if (thisUri != null && thisUri.equals(otherRsrcUri)) {
					error("This URI is already used by model '" + otherFN + "'", SADLPackage.Literals.SADL_MODEL__BASE_URI, INVALID_MODEL_URI)
				}
				var thisAlias = model.alias
				var otherAlias = otherModel.alias
				if (otherAlias != null && thisAlias != null && otherAlias.equals(thisAlias)) {
					error("This alias is already used by model '" + otherFN + "'; must be unique", SADLPackage.Literals.SADL_MODEL__ALIAS, INVALID_MODEL_ALIAS)
				}
			}
		}
		var imports = model.imports
		// does an import need any validation?
		if (imports != null) {
			var itr = imports.iterator
			while (itr.hasNext) {
				var imp = itr.next;
				var sm = imp.importedResource
				var impuri = sm.baseUri
				errMsg = SadlUtils.validateUri(impuri);
				if (errMsg != null) {
//					error(errMsg, imp, imp.importedReSsource. INVALID_IMPORT_URI);
					System.err.println(errMsg);
				}
		}
			}
	}
	
}
